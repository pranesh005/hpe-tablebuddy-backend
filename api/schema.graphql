schema {
    query: Query
    mutation: Mutation
}

type Student {
    id: Int!
    name: String!
    email: String!
    section_id: Int!
    password:String!
}


type TimeTable{
    id:Int!
    std:String!
    section:String!
    day:String!
    period_1:String!
    period_2:String!
    period_3:String!
    period_4:String!
    period_5:String!
    period_6:String!
}
type StudentResult {
    success: Boolean!
    errors: [String]
    student: Student
}
type TimeTableResult{
    success: Boolean!
    errors: [String]
    timetable: [TimeTable]
}


type CommonMessage{
    success:Boolean!
    errors:[String]
    message: String!
}

type StudentsResult {
    success: Boolean!
    errors: [String]
    students: [Student]
}
type Mutation{
    addStudent(name:String!,email:String!,password:String!,section_id:Int!): CommonMessage!
    # createTimeTable(objects:[..TimeTable!]!):CommonMessage!
}
type Query {
    listStudents: StudentsResult!
    getStudent(email:String!,password:String!): StudentResult!
    getTimeTable(std:String!,section:String!):TimeTableResult!
}