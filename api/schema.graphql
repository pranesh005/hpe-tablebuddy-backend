schema {
    query: Query
    mutation: Mutation
}

type Student {
    id: Int!
    name: String!
    email: String!
    section: String!
    std:String!
    password:String!
}


type TimeTable{
    id:Int
    std:String
    section:String
    day:String
    p_one:String
    p_two:String
    p_three:String
    p_four:String
    p_five:String
    p_six:String
}
type StudentResult {
    success: Boolean!
    errors: [String]
    student: Student
}
type TimeTableResult{
    success: Boolean!
    errors: [String]
    timetable: [TimeTable]
}


type CommonMessage{
    success:Boolean!
    errors:[String]
    message: String
}

type StudentsResult {
    success: Boolean!
    errors: [String]
    students: [Student]
}
type Mutation{
    addStudent(name:String!,email:String!,password:String!,section:String!,std:String!): CommonMessage!
    createTimeTable(std:String!,section:String!,day:String!,p_one:String!,p_two:String!,p_three:String!,p_four:String!,p_five:String!,p_six:String!):CommonMessage!
    deleteTimeTable:CommonMessage!
}
type Query {
    listStudents: StudentsResult!
    getStudent(email:String!,password:String!): StudentResult!
    getTimeTable(std:String!,section:String!):TimeTableResult!
}